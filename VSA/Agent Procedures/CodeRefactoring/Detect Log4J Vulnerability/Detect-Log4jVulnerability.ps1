#Create VSA X Event Source if it doesn't exist
if ( -not [System.Diagnostics.EventLog]::SourceExists("VSA X") ) {
    [System.Diagnostics.EventLog]::CreateEventSource( "VSA X", "Application" )
}

$DownloadUrl  = 'https://github.com/lunasec-io/lunasec/releases/download/v1.0.0-lunatrace/lunatrace_1.0.0-lunatrace_Windows_x86_64.exe'
$DownloadPath = "$env:TEMP\log4shell.exe"
$ResultPath   = "$env:TEMP\log4check.txt"

#region function Get-FileFromURI
function Get-FileFromURI {
    [OutputType([bool])]
    param (
        [parameter(Mandatory = $true)]
        [ValidateNotNullOrEmpty()]
        [string] $DownloadUrl,

        [parameter(Mandatory = $true)]
        [ValidateNotNullOrEmpty()]
        [string] $SaveTo,

        [parameter(Mandatory = $false)]
        [ValidateNotNullOrEmpty()]
        [int] $TimeoutSec = 600
    )
    [bool] $Result = $false

    $ProgressPreference = 'SilentlyContinue'
    $ResponseCode = try {
        (Invoke-WebRequest -Uri $DownloadUrl -OutFile $SaveTo -UseBasicParsing -TimeoutSec $TimeoutSec -PassThru -ErrorAction Stop).StatusCode
    } catch {
        $_.Exception.Response.StatusCode.value__
    }

    if (200 -eq $ResponseCode) {
        if (Test-Path -Path $SaveTo ) {
            Unblock-File -Path $SaveTo
            $Result = $true
        } else {
            [System.Diagnostics.EventLog]::WriteEntry("VSA X", "Unable to find downloaded file at <$SaveTo>", "Error", 400)
        }
    } else {
        [System.Diagnostics.EventLog]::WriteEntry("VSA X", "Unable to download from <$DownloadUrl> to <$SaveTo>. Response: [$ResponseCode]", "Error", 400)
    }
    return $Result
}
#endregion function Get-FileFromURI

[bool] $IsFileObtained = Get-FileFromURI -DownloadUrl $DownloadUri -SaveTo $DownloadPath

if ($IsFileObtained) {
    $filePath=$args[0]
    $drives = (Get-Volume | Where-Object {($_.DriveType -EQ 'Fixed') -and ($_.DriveLetter -ne $null)}).DriveLetter

    foreach ($drive in $drives) {
        #Write-Host ($drive)
        $drive += ":\"
        cmd.exe /c $DownloadPath scan $drive | Out-File -FilePath $ResultPath -Append -Encoding utf8
    }
}

if ( $((Get-Content -Path $ResultPath) -join "`n").Contains('vulnerable') ) {
    #Update field VULNERABLE
} else {
    #Update field NOT DETECTED
}
<?xml version="1.0" encoding="utf-8"?>
<ScExport xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://www.kaseya.com/vsa/2008/12/Scripting">
  <Folder name="Mapped Drives" treePres="3">
    <Procedure name="Remove Mapped Drive" treePres="3" id="1438886080" folderId="632515258776263" treeFullPath="myProcedures - kadmin.Mapped Drives">
      <Body description="The procedure calls PowerShell script that Removes existing drive mapped to a certain network path&#xA;&#xA;Author: Proserv Team - VS">
        <Statement description="The procedure calls PowerShell script that Removes existing drive mapped to a certain network path&#xD;&#xA;Version: 0.1.1&#xD;&#xA;Author:  Proserv Team - VS&#xD;&#xA;################################&#xD;&#xA;Request mapping info" name="GetVariable" continueOnFail="false">
          <Parameter xsi:type="EnumParameter" name="VariableType" value="Prompt" />
          <Parameter xsi:type="StringParameter" name="SourceContent" value="Provide mapped drive letter (H ... Z), please" />
          <Parameter xsi:type="StringParameter" name="VariableName" value="DriveLetter" />
        </Statement>
        <Statement name="GetVariable" continueOnFail="false">
          <Parameter xsi:type="EnumParameter" name="VariableType" value="Prompt" />
          <Parameter xsi:type="StringParameter" name="SourceContent" value="Provide network path for the mapped drive (\\Server\Share), please" />
          <Parameter xsi:type="StringParameter" name="VariableName" value="SharePath" />
        </Statement>
        <Statement description="Check if Drive Letter is valid" name="Execute Shell Command - Get Results to Variable" continueOnFail="false">
          <Parameter xsi:type="StringParameter" name="Parameter1" value="Powershell.exe -NoProfile -ExecutionPolicy Bypass -Command &quot;[string] $SIDPattern = '^[h-zH-Z]{1}$'; If ( '#DriveLetter#' -notmatch $SIDPattern) { Write-Output 'Drive Letter is NOT in H...Z' } else {Write-Output 'OK'}&quot;" />
          <Parameter xsi:type="StringParameter" name="Parameter2" value="True" />
          <Parameter xsi:type="StringParameter" name="Parameter3" value="System" />
        </Statement>
        <If description="">
          <Condition name="CheckVariable">
            <Parameter xsi:type="StringParameter" name="VariableName" value="#global:cmdresults#" />
            <Parameter xsi:type="EnumParameter" name="Condition" value="Equals" />
            <Parameter xsi:type="StringParameter" name="Value" value="OK" />
          </Condition>
          <Then>
            <Statement description="Check if network path is valid" name="Execute Shell Command - Get Results to Variable" continueOnFail="false">
              <Parameter xsi:type="StringParameter" name="Parameter1" value="Powershell.exe -NoProfile -ExecutionPolicy Bypass -Command &quot;[string] $SIDPattern = '(\\)(\\[\w!@#$%^()\-.~\.-_]+){2,}'; If ( '#SharePath#' -notmatch $SIDPattern) { Write-Output 'Network share is NOT in \\Server\Share format' } else {Write-Output 'OK'}&quot;" />
              <Parameter xsi:type="StringParameter" name="Parameter2" value="True" />
              <Parameter xsi:type="StringParameter" name="Parameter3" value="System" />
            </Statement>
            <If description="">
              <Condition name="CheckVariable">
                <Parameter xsi:type="StringParameter" name="VariableName" value="#global:cmdresults#" />
                <Parameter xsi:type="EnumParameter" name="Condition" value="Equals" />
                <Parameter xsi:type="StringParameter" name="Value" value="OK" />
              </Condition>
              <Then>
                <Statement description="Local working folder" name="GetVariable" continueOnFail="false">
                  <Parameter xsi:type="EnumParameter" name="VariableType" value="AgentTempSystemDirectory" />
                  <Parameter xsi:type="StringParameter" name="SourceContent" value="" />
                  <Parameter xsi:type="StringParameter" name="VariableName" value="WorkingDirectory" />
                </Statement>
                <Statement description="Set name for the script and/or log file" name="GetVariable" continueOnFail="false">
                  <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
                  <Parameter xsi:type="StringParameter" name="SourceContent" value="Remove-MappedDrive" />
                  <Parameter xsi:type="StringParameter" name="VariableName" value="ScriptBaseName" />
                </Statement>
                <Statement name="GetVariable" continueOnFail="false">
                  <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
                  <Parameter xsi:type="StringParameter" name="SourceContent" value="#WorkingDirectory#\#ScriptBaseName#.ps1" />
                  <Parameter xsi:type="StringParameter" name="VariableName" value="ScriptFullPath" />
                </Statement>
                <Statement description="Download the script" name="WriteFile" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Path" value="#ScriptFullPath#" />
                  <Parameter xsi:type="StringParameter" name="ManagedFile" value="VSASharedFiles\#ScriptBaseName#.ps1" />
                  <Parameter xsi:type="BooleanParameter" name="DeleteAfter" value="False" />
                </Statement>
                <If description="################################">
                  <Condition name="TestFile">
                    <Parameter xsi:type="StringParameter" name="Path" value="#ScriptFullPath#" />
                    <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                    <Parameter xsi:type="StringParameter" name="Value" value="" />
                  </Condition>
                  <Then>
                    <Statement description="Define the script's parameters" name="GetVariable" continueOnFail="false">
                      <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
                      <Parameter xsi:type="StringParameter" name="SourceContent" value="&quot;&amp; '#ScriptFullPath#' -UNCPath '#SharePath#' -DriveLetter '#DriveLetter#' -LogIt" />
                      <Parameter xsi:type="StringParameter" name="VariableName" value="ScriptCommandParameters" />
                    </Statement>
                    <Statement name="ExecuteShellCommand" continueOnFail="false">
                      <Parameter xsi:type="StringParameter" name="Command" value="Powershell.exe -NoProfile -ExecutionPolicy Bypass -Command #ScriptCommandParameters#" />
                      <Parameter xsi:type="EnumParameter" name="ExecuteAccount" value="System" />
                      <Parameter xsi:type="BooleanParameter" name="Is64Bit" value="False" />
                    </Statement>
                    <Statement name="DeleteFile" continueOnFail="true">
                      <Parameter xsi:type="StringParameter" name="Path" value="#ScriptFullPath#" />
                    </Statement>
                  </Then>
                  <Else>
                    <Statement name="WriteScriptLogEntry" continueOnFail="false">
                      <Parameter xsi:type="StringParameter" name="Comment" value="Could not download #ScriptBaseName#.ps1" />
                    </Statement>
                  </Else>
                </If>
              </Then>
              <Else>
                <Statement name="WriteScriptLogEntry" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Comment" value="#global:cmdresults#" />
                </Statement>
              </Else>
            </If>
          </Then>
          <Else>
            <Statement name="WriteScriptLogEntry" continueOnFail="false">
              <Parameter xsi:type="StringParameter" name="Comment" value="#global:cmdresults#" />
            </Statement>
          </Else>
        </If>
      </Body>
    </Procedure>
    <Procedure name="Set Mapped Drive" treePres="3" id="451962796" folderId="632515258776263" treeFullPath="myProcedures - kadmin.Mapped Drives">
      <Body description="The procedure calls PowerShell script that creates new or updates existing mapped drive&#xA;&#xA;Author: Proserv Team - VS">
        <Statement description="The procedure calls PowerShell script that creates new or updates existing mapped drive&#xD;&#xA;Version: 0.1.2&#xD;&#xA;Author:  Proserv Team - VS&#xD;&#xA;################################&#xD;&#xA;Request mapping info" name="GetVariable" continueOnFail="false">
          <Parameter xsi:type="EnumParameter" name="VariableType" value="Prompt" />
          <Parameter xsi:type="StringParameter" name="SourceContent" value="Provide mapped drive letter (H ... Z), please" />
          <Parameter xsi:type="StringParameter" name="VariableName" value="DriveLetter" />
        </Statement>
        <Statement name="GetVariable" continueOnFail="false">
          <Parameter xsi:type="EnumParameter" name="VariableType" value="Prompt" />
          <Parameter xsi:type="StringParameter" name="SourceContent" value="Provide network path for the mapped drive (\\Server\Share), please" />
          <Parameter xsi:type="StringParameter" name="VariableName" value="SharePath" />
        </Statement>
        <Statement name="GetVariable" continueOnFail="false">
          <Parameter xsi:type="EnumParameter" name="VariableType" value="Prompt" />
          <Parameter xsi:type="StringParameter" name="SourceContent" value="Update existing mappings (1- update, 0- leave intact)" />
          <Parameter xsi:type="StringParameter" name="VariableName" value="global:UpdateMapping" />
        </Statement>
        <Statement name="GetVariable" continueOnFail="false">
          <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
          <Parameter xsi:type="StringParameter" name="SourceContent" value="10" />
          <Parameter xsi:type="StringParameter" name="VariableName" value="global:DelaySeconds" />
        </Statement>
        <If description="Check if UpdateMapping is valid">
          <Condition name="CheckVariable">
            <Parameter xsi:type="StringParameter" name="VariableName" value="#global:UpdateMapping#" />
            <Parameter xsi:type="EnumParameter" name="Condition" value="NotEquals" />
            <Parameter xsi:type="StringParameter" name="Value" value="1" />
          </Condition>
          <Then>
            <Statement name="GetVariable" continueOnFail="false">
              <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
              <Parameter xsi:type="StringParameter" name="SourceContent" value="0" />
              <Parameter xsi:type="StringParameter" name="VariableName" value="global:UpdateMapping" />
            </Statement>
          </Then>
        </If>
        <Statement description="Check if Drive Letter is valid" name="Execute Shell Command - Get Results to Variable" continueOnFail="false">
          <Parameter xsi:type="StringParameter" name="Parameter1" value="Powershell.exe -NoProfile -ExecutionPolicy Bypass -Command &quot;[string] $SIDPattern = '^[h-zH-Z]{1}$'; If ( '#DriveLetter#' -notmatch $SIDPattern) { Write-Output 'Drive Letter is NOT in H...Z' } else {Write-Output 'OK'}&quot;" />
          <Parameter xsi:type="StringParameter" name="Parameter2" value="True" />
          <Parameter xsi:type="StringParameter" name="Parameter3" value="System" />
        </Statement>
        <If description="">
          <Condition name="CheckVariable">
            <Parameter xsi:type="StringParameter" name="VariableName" value="#global:cmdresults#" />
            <Parameter xsi:type="EnumParameter" name="Condition" value="Equals" />
            <Parameter xsi:type="StringParameter" name="Value" value="OK" />
          </Condition>
          <Then>
            <Statement description="Check if network path is valid" name="Execute Shell Command - Get Results to Variable" continueOnFail="false">
              <Parameter xsi:type="StringParameter" name="Parameter1" value="Powershell.exe -NoProfile -ExecutionPolicy Bypass -Command &quot;[string] $SIDPattern = '(\\)(\\[\w!@#$%^()\-.~\.-_]+){2,}'; If ( '#SharePath#' -notmatch $SIDPattern) { Write-Output 'Network share is NOT in \\Server\Share format' } else {Write-Output 'OK'}&quot;" />
              <Parameter xsi:type="StringParameter" name="Parameter2" value="True" />
              <Parameter xsi:type="StringParameter" name="Parameter3" value="System" />
            </Statement>
            <If description="">
              <Condition name="CheckVariable">
                <Parameter xsi:type="StringParameter" name="VariableName" value="#global:cmdresults#" />
                <Parameter xsi:type="EnumParameter" name="Condition" value="Equals" />
                <Parameter xsi:type="StringParameter" name="Value" value="OK" />
              </Condition>
              <Then>
                <Statement description="Local working folder" name="GetVariable" continueOnFail="false">
                  <Parameter xsi:type="EnumParameter" name="VariableType" value="AgentTempSystemDirectory" />
                  <Parameter xsi:type="StringParameter" name="SourceContent" value="" />
                  <Parameter xsi:type="StringParameter" name="VariableName" value="WorkingDirectory" />
                </Statement>
                <Statement description="Set name for the script and/or log file" name="GetVariable" continueOnFail="false">
                  <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
                  <Parameter xsi:type="StringParameter" name="SourceContent" value="Set-MappedDrive" />
                  <Parameter xsi:type="StringParameter" name="VariableName" value="ScriptBaseName" />
                </Statement>
                <Statement name="GetVariable" continueOnFail="false">
                  <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
                  <Parameter xsi:type="StringParameter" name="SourceContent" value="#WorkingDirectory#\#ScriptBaseName#.ps1" />
                  <Parameter xsi:type="StringParameter" name="VariableName" value="ScriptFullPath" />
                </Statement>
                <Statement name="GetVariable" continueOnFail="false">
                  <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
                  <Parameter xsi:type="StringParameter" name="SourceContent" value="Reconnect-MappedDrive" />
                  <Parameter xsi:type="StringParameter" name="VariableName" value="WorkaroundScriptName" />
                </Statement>
                <Statement name="GetVariable" continueOnFail="false">
                  <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
                  <Parameter xsi:type="StringParameter" name="SourceContent" value="#WorkingDirectory#\#WorkaroundScriptName#.ps1" />
                  <Parameter xsi:type="StringParameter" name="VariableName" value="WorkaroundScriptPath" />
                </Statement>
                <Statement description="Download the scripts" name="WriteFile" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Path" value="#ScriptFullPath#" />
                  <Parameter xsi:type="StringParameter" name="ManagedFile" value="VSASharedFiles\#ScriptBaseName#.ps1" />
                  <Parameter xsi:type="BooleanParameter" name="DeleteAfter" value="False" />
                </Statement>
                <Statement name="WriteFile" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Path" value="#WorkaroundScriptPath#" />
                  <Parameter xsi:type="StringParameter" name="ManagedFile" value="VSASharedFiles\#WorkaroundScriptName#.ps1" />
                  <Parameter xsi:type="BooleanParameter" name="DeleteAfter" value="False" />
                </Statement>
                <If description="################################">
                  <Condition name="TestFile">
                    <Parameter xsi:type="StringParameter" name="Path" value="#ScriptFullPath#" />
                    <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                    <Parameter xsi:type="StringParameter" name="Value" value="" />
                  </Condition>
                  <Then>
                    <Statement description="Define the script's parameters" name="GetVariable" continueOnFail="false">
                      <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
                      <Parameter xsi:type="StringParameter" name="SourceContent" value="&quot;&amp; '#ScriptFullPath#' -UNCPath '#SharePath#' -DriveLetter '#DriveLetter#' -LogIt -UpdateMapping #global:UpdateMapping#" />
                      <Parameter xsi:type="StringParameter" name="VariableName" value="ScriptCommandParameters" />
                    </Statement>
                    <Statement name="ExecuteShellCommand" continueOnFail="false">
                      <Parameter xsi:type="StringParameter" name="Command" value="Powershell.exe -NoProfile -ExecutionPolicy Bypass -Command #ScriptCommandParameters#" />
                      <Parameter xsi:type="EnumParameter" name="ExecuteAccount" value="System" />
                      <Parameter xsi:type="BooleanParameter" name="Is64Bit" value="False" />
                    </Statement>
                    <Statement name="DeleteFile" continueOnFail="true">
                      <Parameter xsi:type="StringParameter" name="Path" value="#ScriptFullPath#" />
                    </Statement>
                    <Statement description="## #--Workaround for Windows 10 mapped drive issues--###&#xD;&#xA;## Create startup task" name="ExecuteShellCommand" continueOnFail="false">
                      <Parameter xsi:type="StringParameter" name="Command" value="Powershell.exe -Command &quot;$WScriptShell = New-Object -ComObject WScript.Shell; $Shortcut = $WScriptShell.CreateShortcut(&quot;&quot;&quot;$($env:ProgramData)\Microsoft\Windows\Start Menu\Programs\Startup\#WorkaroundScriptName#.lnk&quot;&quot;&quot;); $Shortcut.TargetPath = 'Powershell.exe'; $Shortcut.Arguments =  '-WindowStyle Hidden -ExecutionPolicy Bypass -File #WorkaroundScriptPath#'; $Shortcut.Save()&quot;" />
                      <Parameter xsi:type="EnumParameter" name="ExecuteAccount" value="System" />
                      <Parameter xsi:type="BooleanParameter" name="Is64Bit" value="False" />
                    </Statement>
                    <Statement description="####Create scheduled task for logged in users" name="GetVariable" continueOnFail="false">
                      <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
                      <Parameter xsi:type="StringParameter" name="SourceContent" value="Schedule-PSScript" />
                      <Parameter xsi:type="StringParameter" name="VariableName" value="ScriptBaseName" />
                    </Statement>
                    <Statement name="GetVariable" continueOnFail="false">
                      <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
                      <Parameter xsi:type="StringParameter" name="SourceContent" value="#WorkingDirectory#\#ScriptBaseName#.ps1" />
                      <Parameter xsi:type="StringParameter" name="VariableName" value="ScriptFullPath" />
                    </Statement>
                    <Statement name="WriteFile" continueOnFail="false">
                      <Parameter xsi:type="StringParameter" name="Path" value="#vAgentConfiguration.agentTempSecureDir#/#ScriptBaseName#.ps1" />
                      <Parameter xsi:type="StringParameter" name="ManagedFile" value="VSASharedFiles\#ScriptBaseName#.ps1" />
                      <Parameter xsi:type="BooleanParameter" name="DeleteAfter" value="False" />
                    </Statement>
                    <If description="">
                      <Condition name="TestFile">
                        <Parameter xsi:type="StringParameter" name="Path" value="#ScriptFullPath#" />
                        <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                        <Parameter xsi:type="StringParameter" name="Value" value="" />
                      </Condition>
                      <Then>
                        <Statement name="Execute Shell Command - Get Results to Variable" continueOnFail="false">
                          <Parameter xsi:type="StringParameter" name="Parameter1" value="Powershell.exe -NoProfile -ExecutionPolicy Bypass -Command #ScriptFullPath#  -DelaySeconds #global:DelaySeconds# -TaskName #WorkaroundScriptName# -ScheduledTaskAction '-WindowStyle Hidden -NoLogo -ExecutionPolicy Bypass -File #WorkaroundScriptPath#'" />
                          <Parameter xsi:type="StringParameter" name="Parameter2" value="True" />
                          <Parameter xsi:type="StringParameter" name="Parameter3" value="System" />
                        </Statement>
                        <Statement description="Cleanup" name="DeleteFile" continueOnFail="false">
                          <Parameter xsi:type="StringParameter" name="Path" value="#ScriptFullPath#" />
                        </Statement>
                      </Then>
                      <Else>
                        <Statement name="WriteScriptLogEntry" continueOnFail="false">
                          <Parameter xsi:type="StringParameter" name="Comment" value="Could not download #ScriptBaseName#.ps1" />
                        </Statement>
                      </Else>
                    </If>
                  </Then>
                  <Else>
                    <Statement name="WriteScriptLogEntry" continueOnFail="false">
                      <Parameter xsi:type="StringParameter" name="Comment" value="Could not download #ScriptBaseName#.ps1" />
                    </Statement>
                  </Else>
                </If>
              </Then>
              <Else>
                <Statement name="WriteScriptLogEntry" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Comment" value="#global:cmdresults#" />
                </Statement>
              </Else>
            </If>
          </Then>
          <Else>
            <Statement name="WriteScriptLogEntry" continueOnFail="false">
              <Parameter xsi:type="StringParameter" name="Comment" value="#global:cmdresults#" />
            </Statement>
          </Else>
        </If>
      </Body>
    </Procedure>
  </Folder>
</ScExport>
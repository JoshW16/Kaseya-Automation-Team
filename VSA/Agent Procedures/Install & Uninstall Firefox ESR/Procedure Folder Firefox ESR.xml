<?xml version="1.0" encoding="utf-8"?>
<ScriptExport xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://www.kaseya.com/vsa/2008/12/Scripting">
  <Folder name="Firefox ESR" treePres="3">
    <Procedure name="Install Firefox ESR" treePres="3" id="1978042503" folderId="210525904693886" treeFullPath="myProcedures - kadmin.Firefox ESR">
      <Body description="The procedure detects if Mozilla Firefox installed on the Windows computer.&#xA;If not, it downloads &amp; installs Firefox ESR">
        <Statement description="The procedure detects if Mozilla Firefox installed on the Windows computer. If not, it downloads &amp; installs Firefox ESR&#xD;&#xA;Version: 0.1.1&#xD;&#xA;Author: Proserv Team - VS&#xD;&#xA;https://ftp.mozilla.org/pub/firefox/releases/latest-esr/README.txt" name="GetVariable" continueOnFail="false">
          <Parameter xsi:type="EnumParameter" name="VariableType" value="AgentTempSystemDirectory" />
          <Parameter xsi:type="StringParameter" name="SourceContent" value="" />
          <Parameter xsi:type="StringParameter" name="VariableName" value="WorkingDirectory" />
        </Statement>
        <Statement description="detect if Firefox already installed" name="GetVariable" continueOnFail="false">
          <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
          <Parameter xsi:type="StringParameter" name="SourceContent" value="[string[]]$UninstallKeys=@(&quot;&quot;&quot;HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall&quot;&quot;&quot;, &quot;&quot;&quot;HKLM:\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall&quot;&quot;&quot;); [string]$regex=&quot;&quot;&quot;S-\d-\d+-(\d+-){1,14}\d+$&quot;&quot;&quot;; $null = New-PSDrive -Name HKU -PSProvider Registry -Root Registry::HKEY_USERS; $UninstallKeys += Get-ChildItem HKU: -ErrorAction SilentlyContinue | Where-Object { $_.Name -match $regex } | ForEach-Object { &quot;&quot;&quot;HKU:\$($_.PSChildName)\Software\Microsoft\Windows\CurrentVersion\Uninstall&quot;&quot;&quot; }; [string[]] $UninstallStrings = @(); foreach ($UninstallKey in $UninstallKeys) { $UninstallStrings += Get-ChildItem -Path $UninstallKey -ErrorAction SilentlyContinue | Where-Object {$_.GetValue(&quot;&quot;&quot;DisplayName&quot;&quot;&quot;) -match &quot;&quot;&quot;Firefox&quot;&quot;&quot;} | Select-Object @{n=&quot;&quot;&quot;UninstallString&quot;&quot;&quot;; e={$_.GetValue(&quot;&quot;&quot;UninstallString&quot;&quot;&quot;)}} | Select-Object -ExpandProperty &quot;&quot;&quot;UninstallString&quot;&quot;&quot; }; Remove-PSDrive HKU; Write-Output $($UninstallStrings.Count)" />
          <Parameter xsi:type="StringParameter" name="VariableName" value="ScriptDetect" />
        </Statement>
        <Statement name="Execute Shell Command - Get Results to Variable" continueOnFail="false">
          <Parameter xsi:type="StringParameter" name="Parameter1" value="Powershell.exe -NoProfile -ExecutionPolicy Bypass -Command  &quot;#ScriptDetect#&quot;" />
          <Parameter xsi:type="StringParameter" name="Parameter2" value="True" />
          <Parameter xsi:type="StringParameter" name="Parameter3" value="System" />
        </Statement>
        <Statement name="GetVariable" continueOnFail="false">
          <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
          <Parameter xsi:type="StringParameter" name="SourceContent" value="#global:cmdresults#" />
          <Parameter xsi:type="StringParameter" name="VariableName" value="FirefoxCheckResult" />
        </Statement>
        <If description="">
          <Condition name="CheckVariable">
            <Parameter xsi:type="StringParameter" name="VariableName" value="#FirefoxCheckResult#" />
            <Parameter xsi:type="EnumParameter" name="Condition" value="GreaterThan" />
            <Parameter xsi:type="StringParameter" name="Value" value="0" />
          </Condition>
          <Then>
            <Statement name="WriteScriptLogEntry" continueOnFail="false">
              <Parameter xsi:type="StringParameter" name="Comment" value="Firefox already installed" />
            </Statement>
          </Then>
          <Else>
            <Statement description="Download &amp; install the latest Firefox ESR" name="GetVariable" continueOnFail="false">
              <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
              <Parameter xsi:type="StringParameter" name="SourceContent" value="#WorkingDirectory#\FirefoxSetup.msi" />
              <Parameter xsi:type="StringParameter" name="VariableName" value="InstallerMSI" />
            </Statement>
            <Statement name="GetVariable" continueOnFail="false">
              <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
              <Parameter xsi:type="StringParameter" name="SourceContent" value="https://download.mozilla.org/?product=firefox-esr-msi-latest-ssl" />
              <Parameter xsi:type="StringParameter" name="VariableName" value="URLCommonPart" />
            </Statement>
            <Statement name="GetVariable" continueOnFail="false">
              <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
              <Parameter xsi:type="StringParameter" name="SourceContent" value="lang=en-US" />
              <Parameter xsi:type="StringParameter" name="VariableName" value="URLLanguage" />
            </Statement>
            <If description="">
              <Condition name="Windows 32 or 64 Bit Check">
                <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
              </Condition>
              <Then>
                <Statement name="GetVariable" continueOnFail="false">
                  <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
                  <Parameter xsi:type="StringParameter" name="SourceContent" value="os=win64" />
                  <Parameter xsi:type="StringParameter" name="VariableName" value="global:URLOS" />
                </Statement>
              </Then>
            </If>
            <If description="">
              <Condition name="Windows 32 or 64 Bit Check">
                <Parameter xsi:type="EnumParameter" name="Condition" value="NotExists" />
              </Condition>
              <Then>
                <Statement name="GetVariable" continueOnFail="false">
                  <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
                  <Parameter xsi:type="StringParameter" name="SourceContent" value="os=win" />
                  <Parameter xsi:type="StringParameter" name="VariableName" value="global:URLOS" />
                </Statement>
              </Then>
            </If>
            <Statement name="GetURL" continueOnFail="false">
              <Parameter xsi:type="StringParameter" name="URL" value="#URLCommonPart#&amp;#global:URLOS#&amp;#URLLanguage#" />
              <Parameter xsi:type="StringParameter" name="ResponseFileName" value="#InstallerMSI#" />
              <Parameter xsi:type="BooleanParameter" name="WaitComplete" value="True" />
            </Statement>
            <If description="">
              <Condition name="TestFile">
                <Parameter xsi:type="StringParameter" name="Path" value="#InstallerMSI#" />
                <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                <Parameter xsi:type="StringParameter" name="Value" value="" />
              </Condition>
              <Then>
                <Statement name="WriteScriptLogEntry" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Comment" value="MSI downloaded from #URLCommonPart#&amp;#global:URLOS#&amp;#URLLanguage#" />
                </Statement>
                <Statement name="Install MSI" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Parameter1" value="#InstallerMSI#" />
                  <Parameter xsi:type="StringParameter" name="Parameter2" value="True" />
                  <Parameter xsi:type="StringParameter" name="Parameter3" value="True" />
                </Statement>
                <Statement description="Check if installed successfully" name="Execute Shell Command - Get Results to Variable" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Parameter1" value="Powershell.exe -NoProfile -ExecutionPolicy Bypass -Command  &quot;#ScriptDetect#&quot;" />
                  <Parameter xsi:type="StringParameter" name="Parameter2" value="True" />
                  <Parameter xsi:type="StringParameter" name="Parameter3" value="System" />
                </Statement>
                <Statement name="GetVariable" continueOnFail="false">
                  <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
                  <Parameter xsi:type="StringParameter" name="SourceContent" value="#global:cmdresults#" />
                  <Parameter xsi:type="StringParameter" name="VariableName" value="FirefoxCheckResult" />
                </Statement>
                <If description="">
                  <Condition name="CheckVariable">
                    <Parameter xsi:type="StringParameter" name="VariableName" value="#FirefoxCheckResult#" />
                    <Parameter xsi:type="EnumParameter" name="Condition" value="GreaterThan" />
                    <Parameter xsi:type="StringParameter" name="Value" value="0" />
                  </Condition>
                  <Then>
                    <Statement name="WriteScriptLogEntry" continueOnFail="false">
                      <Parameter xsi:type="StringParameter" name="Comment" value="Firefox ESR installed successfully" />
                    </Statement>
                  </Then>
                  <Else>
                    <Statement name="WriteScriptLogEntry" continueOnFail="false">
                      <Parameter xsi:type="StringParameter" name="Comment" value="Firefox ESR installation was not successful" />
                    </Statement>
                  </Else>
                </If>
                <Statement description="Cleanup" name="DeleteFile" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Path" value="#InstallerMSI#" />
                </Statement>
              </Then>
              <Else>
                <Statement name="WriteScriptLogEntry" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Comment" value="MSI was not downloaded from #URLCommonPart#&amp;#global:URLOS#&amp;#URLLanguage#" />
                </Statement>
              </Else>
            </If>
          </Else>
        </If>
      </Body>
    </Procedure>
    <Procedure name="Uninstall Firefox ESR" treePres="3" id="38628704" folderId="210525904693886" treeFullPath="myProcedures - kadmin.Firefox ESR">
      <Body description="The procedure uninstalls all the versions of Firefox installed on the Windows computer">
        <Statement description="The procedure uninstalls all the versions of Firefox installed on the Windows computer&#xD;&#xA;Version: 0.1.1&#xD;&#xA;Author: Proserv Team - VS" name="GetVariable" continueOnFail="false">
          <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
          <Parameter xsi:type="StringParameter" name="SourceContent" value="'(?&lt;&lt;=\\\&quot;).+?(?=\\\&quot;)'" />
          <Parameter xsi:type="StringParameter" name="VariableName" value="regex" />
        </Statement>
        <Statement name="GetVariable" continueOnFail="false">
          <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
          <Parameter xsi:type="StringParameter" name="SourceContent" value="$RegKeys=@(&quot;&quot;&quot;HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall&quot;&quot;&quot;,&quot;&quot;&quot;HKLM:\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall&quot;&quot;&quot;);$regex=&quot;&quot;&quot;S-\d-\d+-(\d+-){1,14}\d+$&quot;&quot;&quot;;$null=New-PSDrive -Name HKU -PSProvider Registry -Root Registry::HKEY_USERS;$RegKeys+=Get-ChildItem HKU: -ErrorAction SilentlyContinue | Where{$_.Name -match $regex} | ForEach{&quot;&quot;&quot;HKU:\$($_.PSChildName)\Software\Microsoft\Windows\CurrentVersion\Uninstall&quot;&quot;&quot; };$Found=@();foreach($RegKey in $RegKeys) {$Found+= Get-ChildItem -Path $RegKey -ErrorAction SilentlyContinue | Where-Object {$_.GetValue(&quot;&quot;&quot;DisplayName&quot;&quot;&quot;) -match &quot;&quot;&quot;Firefox&quot;&quot;&quot;} | Select @{n=&quot;&quot;&quot;Remove&quot;&quot;&quot;; e={$_.GetValue(&quot;&quot;&quot;UninstallString&quot;&quot;&quot;)}} | Select -ExpandProperty &quot;&quot;&quot;Remove&quot;&quot;&quot; }; Remove-PSDrive HKU;if (0 -lt $Found.Count) { foreach ($RawString in $Found){[string]$Uninstall=[regex]::Matches($RawString, #regex#).Value; &amp; &quot;$Uninstall /S&quot; }};Write-Output $($Found.Count)" />
          <Parameter xsi:type="StringParameter" name="VariableName" value="ScriptRemove" />
        </Statement>
        <Statement name="Execute Shell Command - Get Results to Variable" continueOnFail="false">
          <Parameter xsi:type="StringParameter" name="Parameter1" value="Powershell.exe -NoProfile -ExecutionPolicy Bypass -Command &quot;#ScriptRemove#&quot;" />
          <Parameter xsi:type="StringParameter" name="Parameter2" value="True" />
          <Parameter xsi:type="StringParameter" name="Parameter3" value="System" />
        </Statement>
        <Statement name="GetVariable" continueOnFail="false">
          <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
          <Parameter xsi:type="StringParameter" name="SourceContent" value="#global:cmdresults#" />
          <Parameter xsi:type="StringParameter" name="VariableName" value="FirefoxCheckResult" />
        </Statement>
        <If description="detect if Firefox was actually installed">
          <Condition name="CheckVariable">
            <Parameter xsi:type="StringParameter" name="VariableName" value="#FirefoxCheckResult#" />
            <Parameter xsi:type="EnumParameter" name="Condition" value="GreaterThan" />
            <Parameter xsi:type="StringParameter" name="Value" value="0" />
          </Condition>
          <Then>
            <Statement name="WriteScriptLogEntry" continueOnFail="false">
              <Parameter xsi:type="StringParameter" name="Comment" value="Firefox detected" />
            </Statement>
            <Statement description="double-check" name="Execute Shell Command - Get Results to Variable" continueOnFail="false">
              <Parameter xsi:type="StringParameter" name="Parameter1" value="Powershell.exe -NoProfile -ExecutionPolicy Bypass -Command &quot;#ScriptRemove#&quot;" />
              <Parameter xsi:type="StringParameter" name="Parameter2" value="True" />
              <Parameter xsi:type="StringParameter" name="Parameter3" value="System" />
            </Statement>
            <Statement name="GetVariable" continueOnFail="false">
              <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
              <Parameter xsi:type="StringParameter" name="SourceContent" value="#global:cmdresults#" />
              <Parameter xsi:type="StringParameter" name="VariableName" value="FirefoxCheckResult" />
            </Statement>
            <If description="">
              <Condition name="CheckVariable">
                <Parameter xsi:type="StringParameter" name="VariableName" value="#FirefoxCheckResult#" />
                <Parameter xsi:type="EnumParameter" name="Condition" value="Equals" />
                <Parameter xsi:type="StringParameter" name="Value" value="0" />
              </Condition>
              <Then>
                <Statement name="WriteScriptLogEntry" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Comment" value="Firefox was removed" />
                </Statement>
              </Then>
              <Else>
                <Statement name="WriteScriptLogEntry" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Comment" value="Firefox uninstallation was not successful" />
                </Statement>
              </Else>
            </If>
          </Then>
          <Else>
            <Statement name="WriteScriptLogEntry" continueOnFail="false">
              <Parameter xsi:type="StringParameter" name="Comment" value="Firefox was not detected" />
            </Statement>
          </Else>
        </If>
      </Body>
    </Procedure>
  </Folder>
</ScriptExport>
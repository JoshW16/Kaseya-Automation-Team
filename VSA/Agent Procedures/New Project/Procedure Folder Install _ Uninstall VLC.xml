<?xml version="1.0" encoding="utf-8"?>
<ScExport xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://www.kaseya.com/vsa/2008/12/Scripting">
  <Folder name="Install &amp; Uninstall VLC" treePres="3">
    <Procedure name="Install VLC" treePres="3" id="1590042511" folderId="889716580412218" treeFullPath="myProcedures - vlad.Install &amp; Uninstall VLC">
      <Body description="The procedure runs a PowerShell script that installs VLC &#xA;on the target computer.">
        <Statement description="The procedure installs VLC on the target computer.&#xD;&#xA;Version: 0.2&#xD;&#xA;Author: Proserv Team - VS&#xD;&#xA;Copy the files to the endpoint" name="WriteDirectory" continueOnFail="false">
          <Parameter xsi:type="StringParameter" name="Path" value="#vAgentConfiguration.agentTempSecureDir#\VLC" />
          <Parameter xsi:type="StringParameter" name="SourceDirectory" value="VSASharedFiles\VLC\" />
          <Parameter xsi:type="StringParameter" name="Param3" value="NoShow" />
        </Statement>
        <If description="">
          <Condition name="TestFile">
            <Parameter xsi:type="StringParameter" name="Path" value="#vAgentConfiguration.agentTempSecureDir#\VLC\vlc-3.0.17.4-win64.exe" />
            <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
            <Parameter xsi:type="StringParameter" name="Value" value="" />
          </Condition>
          <Then>
            <Statement name="Execute Shell Command - Get Results to Variable" continueOnFail="false">
              <Parameter xsi:type="StringParameter" name="Parameter1" value="powershell.exe -ExecutionPolicy Bypass -Command &quot;Get-ItemProperty -Path @('HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\*', 'HKLM:\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\*') -ErrorAction SilentlyContinue | Where-Object { $_.DisplayName -like 'VLC media player' } | Sort-Object -Property @{Expression = {$_.DisplayVersion}; Descending = $True} | Select-Object -ExpandProperty DisplayVersion -First 1 | Write-Output&quot;" />
              <Parameter xsi:type="StringParameter" name="Parameter2" value="True" />
              <Parameter xsi:type="StringParameter" name="Parameter3" value="System" />
            </Statement>
            <If description="">
              <Condition name="CheckVariable">
                <Parameter xsi:type="StringParameter" name="VariableName" value="#global:cmdresults#" />
                <Parameter xsi:type="EnumParameter" name="Condition" value="LessThan" />
                <Parameter xsi:type="StringParameter" name="Value" value="0" />
              </Condition>
              <Then>
                <If description="">
                  <Condition name="Windows 32 or 64 Bit Check">
                    <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
                  </Condition>
                  <Then>
                    <Statement name="ExecuteShellCommand" continueOnFail="false">
                      <Parameter xsi:type="StringParameter" name="Command" value="#vAgentConfiguration.agentTempSecureDir#\VLC\vlc-3.0.17.4-win64.exe /L=1033 /S /NCRC" />
                      <Parameter xsi:type="EnumParameter" name="ExecuteAccount" value="System" />
                      <Parameter xsi:type="BooleanParameter" name="Is64Bit" value="False" />
                    </Statement>
                  </Then>
                  <Else>
                    <Statement name="ExecuteShellCommand" continueOnFail="false">
                      <Parameter xsi:type="StringParameter" name="Command" value="#vAgentConfiguration.agentTempSecureDir#\VLC\vlc-3.0.17.4-win32.exe /L=1033 /S /NCRC" />
                      <Parameter xsi:type="EnumParameter" name="ExecuteAccount" value="System" />
                      <Parameter xsi:type="BooleanParameter" name="Is64Bit" value="False" />
                    </Statement>
                  </Else>
                </If>
                <Statement description="Check if VLC was installed" name="Execute Shell Command - Get Results to Variable" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Parameter1" value="powershell.exe -ExecutionPolicy Bypass -Command &quot;Get-ItemProperty -Path @('HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\*', 'HKLM:\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\*') -ErrorAction SilentlyContinue | Where-Object { $_.DisplayName -like 'VLC media player' } | Sort-Object -Property @{Expression = {$_.DisplayVersion}; Descending = $True} | Select-Object -ExpandProperty DisplayVersion -First 1 | Write-Output&quot;" />
                  <Parameter xsi:type="StringParameter" name="Parameter2" value="True" />
                  <Parameter xsi:type="StringParameter" name="Parameter3" value="System" />
                </Statement>
                <If description="">
                  <Condition name="CheckVariable">
                    <Parameter xsi:type="StringParameter" name="VariableName" value="#global:cmdresults#" />
                    <Parameter xsi:type="EnumParameter" name="Condition" value="GreaterThan" />
                    <Parameter xsi:type="StringParameter" name="Value" value="0" />
                  </Condition>
                  <Then>
                    <Statement name="WriteScriptLogEntry" continueOnFail="false">
                      <Parameter xsi:type="StringParameter" name="Comment" value="VLC Player installed: #global:cmdresults#" />
                    </Statement>
                  </Then>
                  <Else>
                    <Statement name="WriteScriptLogEntry" continueOnFail="false">
                      <Parameter xsi:type="StringParameter" name="Comment" value="Could not detect VLC after installation" />
                    </Statement>
                  </Else>
                </If>
              </Then>
              <Else>
                <Statement name="WriteScriptLogEntry" continueOnFail="false">
                  <Parameter xsi:type="StringParameter" name="Comment" value="VLC Player already installed: #global:cmdresults#" />
                </Statement>
              </Else>
            </If>
            <Statement name="Delete Directory" continueOnFail="false">
              <Parameter xsi:type="StringParameter" name="Parameter1" value="#vAgentConfiguration.agentTempSecureDir#\VLC" />
              <Parameter xsi:type="StringParameter" name="Parameter2" value="true" />
            </Statement>
          </Then>
          <Else>
            <Statement name="WriteScriptLogEntry" continueOnFail="false">
              <Parameter xsi:type="StringParameter" name="Comment" value="ERROR. Couldn't copy the files to the endpoint." />
            </Statement>
          </Else>
        </If>
      </Body>
    </Procedure>
    <Procedure name="Uninstall VLC" treePres="3" id="611816060" folderId="889716580412218" treeFullPath="myProcedures - vlad.Install &amp; Uninstall VLC">
      <Body description="">
        <Statement name="Execute Shell Command - Get Results to Variable" continueOnFail="false">
          <Parameter xsi:type="StringParameter" name="Parameter1" value="powershell.exe -ExecutionPolicy Bypass -Command &quot;Get-ItemProperty -Path @('HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\*', 'HKLM:\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\*') -ErrorAction SilentlyContinue | Where-Object { $_.DisplayName -like 'VLC media player' } | Sort-Object -Property @{Expression = {$_.DisplayVersion}; Descending = $True} | Select-Object -ExpandProperty UninstallString -First 1 | Select-String -Pattern '(?&lt;&lt;=\&quot;).+?(?=\&quot;)' -AllMatches | % { $_.Matches } | % { $_.Value }&quot;" />
          <Parameter xsi:type="StringParameter" name="Parameter2" value="True" />
          <Parameter xsi:type="StringParameter" name="Parameter3" value="System" />
        </Statement>
        <If description="">
          <Condition name="CheckVariable">
            <Parameter xsi:type="StringParameter" name="VariableName" value="#global:cmdresults#" />
            <Parameter xsi:type="EnumParameter" name="Condition" value="Contains" />
            <Parameter xsi:type="StringParameter" name="Value" value=".exe" />
          </Condition>
          <Then>
            <Statement name="ExecuteShellCommand" continueOnFail="false">
              <Parameter xsi:type="StringParameter" name="Command" value="&quot;#global:cmdresults#&quot; /S" />
              <Parameter xsi:type="EnumParameter" name="ExecuteAccount" value="System" />
              <Parameter xsi:type="BooleanParameter" name="Is64Bit" value="False" />
            </Statement>
          </Then>
        </If>
      </Body>
    </Procedure>
  </Folder>
</ScExport>
<?xml version="1.0" encoding="utf-8"?>
<ScriptExport xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://www.kaseya.com/vsa/2008/12/Scripting">
  <Procedure name="Set Adobe Reader DC as default PDF app" treePres="3" id="1296905509" folderId="691945742625717" treeFullPath="myProcedures - kadmin">
    <Body description="The procedure checks if Adobe Reader DC is installed on computer and set it as default application to open the PDF files">
      <Statement description="The procedure checks if Adobe Reader DC is installed on computer and set it as default application to open the PDF files&#xD;&#xA;Version: 0.1&#xD;&#xA;Author:  Proserv Team - VS&#xD;&#xA;################################" name="GetVariable" continueOnFail="false">
        <Parameter xsi:type="EnumParameter" name="VariableType" value="AgentTempSystemDirectory" />
        <Parameter xsi:type="StringParameter" name="SourceContent" value="" />
        <Parameter xsi:type="StringParameter" name="VariableName" value="WorkingDirectory" />
      </Statement>
      <Statement name="GetVariable" continueOnFail="false">
        <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
        <Parameter xsi:type="StringParameter" name="SourceContent" value="Adobe Acrobat Reader DC" />
        <Parameter xsi:type="StringParameter" name="VariableName" value="TheApp" />
      </Statement>
      <Statement description="Check if Adobe Reader DC is installed" name="Execute Shell Command - Get Results to Variable" continueOnFail="false">
        <Parameter xsi:type="StringParameter" name="Parameter1" value="Powershell.exe -NoProfile -ExecutionPolicy Bypass -Command  &quot;$SoftwareKey = 'HKLM:\Software'; if ([Environment]::Is64BitOperatingSystem) { $SoftwareKey = 'HKLM:\Software\WOW6432Node' }; $RegPath = Join-Path -Path $SoftwareKey -ChildPath 'Microsoft\Windows\CurrentVersion\Uninstall\*'; $FoundSoftware = Get-ItemProperty -Path $RegPath | Where-Object {$_.DisplayName -match '#TheApp#'}; if ($null -eq $FoundSoftware) {Write-Output 'Not Found' } else {Write-Output 'Detected'}&quot;" />
        <Parameter xsi:type="StringParameter" name="Parameter2" value="True" />
        <Parameter xsi:type="StringParameter" name="Parameter3" value="System" />
      </Statement>
      <If description="">
        <Condition name="CheckVariable">
          <Parameter xsi:type="StringParameter" name="VariableName" value="#global:cmdresults#" />
          <Parameter xsi:type="EnumParameter" name="Condition" value="Equals" />
          <Parameter xsi:type="StringParameter" name="Value" value="Detected" />
        </Condition>
        <Then>
          <Statement name="GetVariable" continueOnFail="false">
            <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
            <Parameter xsi:type="StringParameter" name="SourceContent" value="Set-DefaultApp" />
            <Parameter xsi:type="StringParameter" name="VariableName" value="ScriptBaseName" />
          </Statement>
          <Statement name="GetVariable" continueOnFail="false">
            <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
            <Parameter xsi:type="StringParameter" name="SourceContent" value="#WorkingDirectory#\#ScriptBaseName#.ps1" />
            <Parameter xsi:type="StringParameter" name="VariableName" value="ScriptFullPath" />
          </Statement>
          <Statement name="WriteFile" continueOnFail="false">
            <Parameter xsi:type="StringParameter" name="Path" value="#ScriptFullPath#" />
            <Parameter xsi:type="StringParameter" name="ManagedFile" value="VSASharedFiles\#ScriptBaseName#.ps1" />
            <Parameter xsi:type="BooleanParameter" name="DeleteAfter" value="False" />
          </Statement>
          <If description="">
            <Condition name="TestFile">
              <Parameter xsi:type="StringParameter" name="Path" value="#ScriptFullPath#" />
              <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
              <Parameter xsi:type="StringParameter" name="Value" value="" />
            </Condition>
            <Then>
              <Statement name="GetVariable" continueOnFail="false">
                <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
                <Parameter xsi:type="StringParameter" name="SourceContent" value="-NoProfile -NonInteractive -WindowStyle Hidden -ExecutionPolicy Bypass -File #ScriptFullPath#" />
                <Parameter xsi:type="StringParameter" name="VariableName" value="ScriptParameters" />
              </Statement>
              <Statement name="ExecuteShellCommand" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="Command" value="Powershell.exe #ScriptParameters#" />
                <Parameter xsi:type="EnumParameter" name="ExecuteAccount" value="System" />
                <Parameter xsi:type="BooleanParameter" name="Is64Bit" value="False" />
              </Statement>
              <Statement description="## Create startup task" name="ExecuteShellCommand" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="Command" value="Powershell.exe -Command &quot;$WScriptShell = New-Object -ComObject WScript.Shell; $Shortcut = $WScriptShell.CreateShortcut(&quot;&quot;&quot;$($env:ProgramData)\Microsoft\Windows\Start Menu\Programs\Startup\SetDefaultPDFApp.lnk&quot;&quot;&quot;); $Shortcut.TargetPath = 'Powershell.exe'; $Shortcut.Arguments =  '-WindowStyle Hidden -ExecutionPolicy Bypass -File #ScriptFullPath#'; $Shortcut.Save()" />
                <Parameter xsi:type="EnumParameter" name="ExecuteAccount" value="System" />
                <Parameter xsi:type="BooleanParameter" name="Is64Bit" value="False" />
              </Statement>
            </Then>
            <Else>
              <Statement name="WriteScriptLogEntry" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="Comment" value="Could not download #ScriptBaseName#.ps1" />
              </Statement>
            </Else>
          </If>
        </Then>
        <Else>
          <Statement name="WriteScriptLogEntry" continueOnFail="false">
            <Parameter xsi:type="StringParameter" name="Comment" value="#TheApp# was not detected on the system." />
          </Statement>
        </Else>
      </If>
    </Body>
  </Procedure>
</ScriptExport>
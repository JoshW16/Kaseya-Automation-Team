<?xml version="1.0" encoding="utf-8"?>
<ScriptExport xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://www.kaseya.com/vsa/2008/12/Scripting">
  <Procedure name="Event Logs Archive &amp; Clear" treePres="3" id="800835327" folderId="691945742625717">
    <Body description="The procedure archives &amp; clears Windows Event Logs">
      <Statement description="The procedure archives &amp; clears Windows Event Logs&#xD;&#xA;Version: 0.1&#xD;&#xA;Author: Proserv Team - VS" name="GetVariable" continueOnFail="false">
        <Parameter xsi:type="EnumParameter" name="VariableType" value="AgentTempSystemDirectory" />
        <Parameter xsi:type="StringParameter" name="SourceContent" value="" />
        <Parameter xsi:type="StringParameter" name="VariableName" value="WorkingDirectory" />
      </Statement>
      <Statement description="By default Logs are backed up to Kaseya Agent working directory. Provide custom path it if needed" name="GetVariable" continueOnFail="false">
        <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
        <Parameter xsi:type="StringParameter" name="SourceContent" value="#WorkingDirectory#" />
        <Parameter xsi:type="StringParameter" name="VariableName" value="ArchivePath" />
      </Statement>
      <Statement name="GetVariable" continueOnFail="false">
        <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
        <Parameter xsi:type="StringParameter" name="SourceContent" value="try {$NonEmptyLogs = Get-WmiObject -Query 'SELECT LogfileName FROM Win32_NTEventLogFile WHERE NumberOfRecords &gt;&gt; 0' -ErrorAction Stop | Select-Object -ExpandProperty LogfileName; Write-Output ($NonEmptyLogs -join ';') } Catch {&quot;Error: $($_.Exception.Message)&quot;}" />
        <Parameter xsi:type="StringParameter" name="VariableName" value="GetLogsCode" />
      </Statement>
      <Statement name="Execute Shell Command - Get Results to Variable" continueOnFail="false">
        <Parameter xsi:type="StringParameter" name="Parameter1" value="Powershell.exe -NoProfile -ExecutionPolicy Bypass -Command  &quot;#GetLogsCode#&quot;" />
        <Parameter xsi:type="StringParameter" name="Parameter2" value="True" />
        <Parameter xsi:type="StringParameter" name="Parameter3" value="System" />
      </Statement>
      <Statement name="GetVariable" continueOnFail="false">
        <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
        <Parameter xsi:type="StringParameter" name="SourceContent" value="#global:cmdresults#" />
        <Parameter xsi:type="StringParameter" name="VariableName" value="NonEmptyLogs" />
      </Statement>
      <If description="">
        <Condition name="CheckVariable">
          <Parameter xsi:type="StringParameter" name="VariableName" value="NonEmptyLogs" />
          <Parameter xsi:type="EnumParameter" name="Condition" value="Contains" />
          <Parameter xsi:type="StringParameter" name="Value" value="Error" />
        </Condition>
        <Then>
          <Statement name="WriteScriptLogEntry" continueOnFail="false">
            <Parameter xsi:type="StringParameter" name="Comment" value="Could Not Obtain Logs #NonEmptyLogs#" />
          </Statement>
        </Then>
        <Else>
          <Statement description="Obtained Non-Empty Logs" name="GetVariable" continueOnFail="false">
            <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
            <Parameter xsi:type="StringParameter" name="SourceContent" value="#vAgentConfiguration.lastCheckin#" />
            <Parameter xsi:type="StringParameter" name="VariableName" value="TimeStamp" />
          </Statement>
          <Statement name="GetVariable" continueOnFail="false">
            <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
            <Parameter xsi:type="StringParameter" name="SourceContent" value="$NonEmptyLogs = '#NonEmptyLogs#' -split ';'; $ResultArray = @();Foreach ($LogName in $NonEmptyLogs) {$Log = Get-WmiObject -Query &quot;&quot;&quot;SELECT * FROM Win32_NTEventLogFile WHERE LogfileName = '$LogName'&quot;&quot;&quot;; $Path = Join-Path -Path '#ArchivePath#'-ChildPath &quot;&quot;&quot;$env:COMPUTERNAME $($Log.LogfileName) $(&quot;&quot;&quot;{0:MM'-'dd'-'yyyy'-'H'h'mm'm'ss's'}&quot;&quot;&quot; -f (Get-Date)).evt&quot;&quot;&quot;; $BackupResult = ($Log.BackupEventLog($Path)).ReturnValue; if(0 -eq $BackupResult) { $ResultArray += &quot;&quot;&quot;Event log $($Log.LogfileName) backed up to $Path.&quot;&quot;&quot;; $ClearResult = ($Log.ClearEventLog()).ReturnValue; if(0 -eq $ClearResult) {$ResultArray += &quot;&quot;&quot;Event log $($Log.LogfileName) cleared.&quot;&quot;&quot;} else {$ResultArray += &quot;&quot;&quot;$($Log.LogfileName) Log clear failed with error [$ClearResult].&quot;&quot;&quot;} } else { $ResultArray += &quot;&quot;&quot;$($Log.LogfileName) Log backup failed with error [$BackupResult]. Not cleared&quot;&quot;&quot;}}; $Result = $ResultArray -join &quot;&quot;&quot;`n&quot;&quot;&quot;; Write-Output $Result" />
            <Parameter xsi:type="StringParameter" name="VariableName" value="ArchiveLogsCode" />
          </Statement>
          <Statement name="Execute Shell Command - Get Results to Variable" continueOnFail="false">
            <Parameter xsi:type="StringParameter" name="Parameter1" value="Powershell.exe -NoProfile -ExecutionPolicy Bypass -Command  &quot;#ArchiveLogsCode#&quot;" />
            <Parameter xsi:type="StringParameter" name="Parameter2" value="True" />
            <Parameter xsi:type="StringParameter" name="Parameter3" value="System" />
          </Statement>
          <Statement name="GetVariable" continueOnFail="false">
            <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
            <Parameter xsi:type="StringParameter" name="SourceContent" value="#global:cmdresults#" />
            <Parameter xsi:type="StringParameter" name="VariableName" value="ArchiveLogsResult" />
          </Statement>
          <Statement name="WriteScriptLogEntry" continueOnFail="false">
            <Parameter xsi:type="StringParameter" name="Comment" value="#ArchiveLogsResult#" />
          </Statement>
        </Else>
      </If>
    </Body>
  </Procedure>
</ScriptExport>
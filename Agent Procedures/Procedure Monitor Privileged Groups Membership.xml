<?xml version="1.0" encoding="utf-8"?>
<ScriptExport xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://www.kaseya.com/vsa/2008/12/Scripting">
  <Procedure name="Monitor Privileged Groups Membership" treePres="3" id="792526001" folderId="691945742625717" treeFullPath="myProcedures - kadmin">
    <Body description="The procedure calls powershell script that iterates privileged domain groups and check if they contain only provided accounts. In case of deficiency sends alert.&#xA;Version 0.1&#xA;Author: Proserv Team - VS">
      <Statement description="The procedure calls powershell script that iterates privileged domain groups and check if they contain only provided accounts. In case of deficiency an alert is sent&#xD;&#xA;Author: Proserv Team - VS&#xD;&#xA;Version 0.1&#xD;&#xA;Set list of eligible domain admins as a comma-separated list of values in double quotes." name="GetVariable" continueOnFail="false">
        <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
        <Parameter xsi:type="StringParameter" name="SourceContent" value="&quot;Administrator&quot;" />
        <Parameter xsi:type="StringParameter" name="VariableName" value="domain_admins" />
      </Statement>
      <Statement description="Set list of eligible enterprise admins as a comma-separated list of values in double quotes or leave it blank if there must be no members." name="GetVariable" continueOnFail="false">
        <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
        <Parameter xsi:type="StringParameter" name="SourceContent" value="&quot;Administrator&quot;" />
        <Parameter xsi:type="StringParameter" name="VariableName" value="enterprise_admins" />
      </Statement>
      <Statement description="Set list of eligible schema admins as a comma-separated list of values in double quotes  or leave it blank if there must be no members" name="GetVariable" continueOnFail="false">
        <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
        <Parameter xsi:type="StringParameter" name="SourceContent" value="&quot;Administrator&quot;" />
        <Parameter xsi:type="StringParameter" name="VariableName" value=" schema_admins" />
      </Statement>
      <Statement description="Get local path" name="GetVariable" continueOnFail="false">
        <Parameter xsi:type="EnumParameter" name="VariableType" value="AgentTempSystemDirectory" />
        <Parameter xsi:type="StringParameter" name="SourceContent" value="" />
        <Parameter xsi:type="StringParameter" name="VariableName" value="path" />
      </Statement>
      <Statement description="Set output file name" name="GetVariable" continueOnFail="false">
        <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
        <Parameter xsi:type="StringParameter" name="SourceContent" value="deficient_groups.txt" />
        <Parameter xsi:type="StringParameter" name="VariableName" value="output_file" />
      </Statement>
      <Statement description="Set Powershell script name" name="GetVariable" continueOnFail="false">
        <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
        <Parameter xsi:type="StringParameter" name="SourceContent" value="Test-PrivilegedGroups.ps1" />
        <Parameter xsi:type="StringParameter" name="VariableName" value="ps_script" />
      </Statement>
      <Statement description="The scripts name &amp; path" name="GetVariable" continueOnFail="false">
        <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
        <Parameter xsi:type="StringParameter" name="SourceContent" value="#path#\#ps_script#" />
        <Parameter xsi:type="StringParameter" name="VariableName" value="ps_script_path_name" />
      </Statement>
      <Statement description="Get the machine type" name="Execute Shell Command - Get Results to Variable" continueOnFail="false" osType="Windows">
        <Parameter xsi:type="StringParameter" name="Parameter1" value="Powershell.exe -NoProfile -ExecutionPolicy Bypass -Command &quot;Get-WmiObject -Namespace root\cimv2 -Class Win32_ComputerSystem -ComputerName $env:COMPUTERNAME | Select-Object -ExpandProperty DomainRole | Write-Output&quot;" />
        <Parameter xsi:type="StringParameter" name="Parameter2" value="True" />
        <Parameter xsi:type="StringParameter" name="Parameter3" value="System" />
      </Statement>
      <If description="Check if the machine is a domain controller. Get-WmiObject  -Class Win32_ComputerSystem returns 4 or 5 if the computer is a domain controller.">
        <Condition name="CheckVariable">
          <Parameter xsi:type="StringParameter" name="VariableName" value="#global:cmdresults#" />
          <Parameter xsi:type="EnumParameter" name="Condition" value="GreaterThanOrEquals" />
          <Parameter xsi:type="StringParameter" name="Value" value="4" />
        </Condition>
        <Then>
          <If description="">
            <Condition name="TestFile">
              <Parameter xsi:type="StringParameter" name="Path" value="#path#\#output_file#" />
              <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
              <Parameter xsi:type="StringParameter" name="Value" value="" />
            </Condition>
            <Then>
              <Statement name="DeleteFile" continueOnFail="false">
                <Parameter xsi:type="StringParameter" name="Path" value="#path#\#output_file#" />
              </Statement>
            </Then>
          </If>
          <Statement description="download the script" name="GetURL" continueOnFail="false">
            <Parameter xsi:type="StringParameter" name="URL" value="https://raw.githubusercontent.com/Kaseya-Automation-Team/Kaseya-Automation-Team/main/Scripts/Powershell/#ps_script#" />
            <Parameter xsi:type="StringParameter" name="ResponseFileName" value="#ps_script_path_name#" />
            <Parameter xsi:type="BooleanParameter" name="WaitComplete" value="True" />
          </Statement>
          <Statement description="Run Powershell script with required parameters and arguments" name="ExecuteShellCommand" continueOnFail="false">
            <Parameter xsi:type="StringParameter" name="Command" value="Powershell.exe -NoProfile -ExecutionPolicy Bypass -Command #ps_script_path_name# -AgentName #vAgentConfiguration.agentGuid# -Path #path# -FileName #output_file# -EligibleEnterpriseAdmins #enterprise_admins# -EligibleSchemaAdmins # schema_admins# -EligibleDomainAdmins #domain_admins#" />
            <Parameter xsi:type="EnumParameter" name="ExecuteAccount" value="System" />
            <Parameter xsi:type="BooleanParameter" name="Is64Bit" value="False" />
          </Statement>
          <If description="check if deficiencies were found">
            <Condition name="TestFile">
              <Parameter xsi:type="StringParameter" name="Path" value="#path#\#output_file#" />
              <Parameter xsi:type="EnumParameter" name="Condition" value="Exists" />
              <Parameter xsi:type="StringParameter" name="Value" value="" />
            </Condition>
            <Then>
              <Statement description="Deficiency detected. Generate alert" name="GetVariable" continueOnFail="false">
                <Parameter xsi:type="EnumParameter" name="VariableType" value="FileContent" />
                <Parameter xsi:type="StringParameter" name="SourceContent" value="#path#\#output_file#" />
                <Parameter xsi:type="StringParameter" name="VariableName" value="outcome" />
              </Statement>
              <Statement name="GetVariable" continueOnFail="false">
                <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
                <Parameter xsi:type="StringParameter" name="SourceContent" value="Privileged group deficiency detected on machine &lt;&lt;id&gt;&gt;" />
                <Parameter xsi:type="StringParameter" name="VariableName" value="alertSubject" />
              </Statement>
              <Statement name="GetVariable" continueOnFail="false">
                <Parameter xsi:type="EnumParameter" name="VariableType" value="ConstantValue" />
                <Parameter xsi:type="StringParameter" name="SourceContent" value="Privileged group deficiency detected &lt;&lt;apn&gt;&gt; on machine &lt;&lt;id&gt;&gt; at &lt;&lt;ata&gt;&gt;. Detailed information: #outcome#" />
                <Parameter xsi:type="StringParameter" name="VariableName" value="alertBody" />
              </Statement>
              <Statement name="SendAlert" continueOnFail="false" />
            </Then>
          </If>
        </Then>
        <Else>
          <Statement name="WriteScriptLogEntry" continueOnFail="false">
            <Parameter xsi:type="StringParameter" name="Comment" value="Not a domain controller" />
          </Statement>
        </Else>
      </If>
    </Body>
  </Procedure>
</ScriptExport>